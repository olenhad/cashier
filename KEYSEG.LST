8086/87/88/186 MACRO ASSEMBLER    TIMER                                                    11:33:59  11/29/;2  PAGE    1


DOS 5.0 (038-N) 8086/87/88/186 MACRO ASSEMBLER V3.1 ASSEMBLY OF MODULE TIMER
OBJECT MODULE PLACED IN KEYSEG.OBJ
ASSEMBLER INVOKED BY:  G:\CASHIER\ASM86.EXE KEYSEG.ASM


LOC  OBJ                  LINE     SOURCE

                             1 +1  $MOD186
                             2 +1  $EP
                             3     NAME TIMER
                             4     ; Main program for uPD70208 microcomputer system
                             5     ;
                             6     ; Author:       Dr Tay Teng Tiow
                             7     ; Address:      Department of Electrical Engineering 
                             8     ;               National University of Singapore
                             9     ;               10, Kent Ridge Crescent
                            10     ;               Singapore 0511. 
                            11     ; Date:         6th September 1991
                            12     ;
                            13     ; This file contains proprietory information and cannot be copied 
                            14     ; or distributed without prior permission from the author.
                            15     ; =========================================================================
                            16     ; 1 KEYBOARD VERSION (TESTING ONLY)
                            17     public  serial_rec_action, timer2_action
                            18     extrn   print_char:far, print_2hex:far, iodefine:far
                            19     extrn   set_timer2:far
  0080                      20     PORTA           equ 080h
  0081                      21     PORTB           EQU 081H
  0082                      22     PORTC           EQU 082H
  0083                      23     CWR             EQU 083H
  0100                      24     LED_SELECT      EQU     0100H
  0180                      25     LED_OUTPUT      EQU     0180H 
  FFA4                      26     PCSBA           EQU    0FFA4H ; Peripheral Chip Select Base Address
  FFA8                      27     MPCS            EQU    0FFA8H ; MMCS and PCS Alter Control Register
  0009                      28     KBD_BUFFER_LEN  EQU             9
  0009                      29     KBD_BUFFER_LEN2 EQU             9
----                        30     STACK_SEG       SEGMENT
0000 (256                   31                     DB      256 DUP(?)
     ??
     )
0100                        32             TOS     LABEL   WORD
----                        33     STACK_SEG       ENDS
                            34     
                            35     
----                        36     DATA_SEG        SEGMENT
                            37             
0000 0A                     38             TIMER0_MESS     DB      10,13,'TIMER2 INTERRUPT    '
0001 0D
0002 54494D45523220
     494E5445525255
     505420202020
0016 2F                     39             T_COUNT         DB      2FH
0017 2F                     40             T_COUNT_SET     DB      2FH
0018 0A                     41             REC_MESS        DB      10,13,'Period of timer0 = '  
0019 0D
001A 506572696F6420
     6F662074696D65
8086/87/88/186 MACRO ASSEMBLER    TIMER                                                    11:33:59  11/29/;2  PAGE    2


LOC  OBJ                  LINE     SOURCE

     7230203D20
002D 31                     42             array       DB      '1','2','3','4','5','6','7','8','9','*','0','#'
002E 32
002F 33
0030 34
0031 35
0032 36
0033 37
0034 38
0035 39
0036 2A
0037 30
0038 23
0039 41                     43             ARRAY2      DB      'A','B','C','D','E','F','G','H','I','J','K','L' 
003A 42
003B 43
003C 44
003D 45
003E 46
003F 47
0040 48
0041 49
0042 4A
0043 4B
0044 4C
0045 3F                     44             BCD         DB  3FH,06H,5BH,4FH,66H,6DH,7DH,07H,7FH,06FH
0046 06
0047 5B
0048 4F
0049 66
004A 6D
004B 7D
004C 07
004D 7F
004E 6F
004F 3F                     45             LED_BUFFER      DB      3fh,06h,5bh,4fh,66h,6dh
0050 06
0051 5B
0052 4F
0053 66
0054 6D
0055 00                     46             CUR_LED         DB      0H
0056 3412                   47             DISPLAY_NUM     DW      1234H
0058 (10                    48             KBD_BUFFER      DB      10 DUP(?)
     ??
     )
0062 00                     49             KBD_BUFFER_SEEK DB      0H
                            50                     
0063 00                     51             KBD_ROW_COUNTER DB      0H
                            52             ;USED TO OUTPUT TO KBD
0064 00                     53             KBD_OUTPUT      DB      0H
0065 00                     54             KBD_INPUT       DB      0H
                            55             
0066 00                     56             LED_CURSOR      DB      0H
0067 00                     57             KBD_ROW_COUNTER2 DB     0H
8086/87/88/186 MACRO ASSEMBLER    TIMER                                                    11:33:59  11/29/;2  PAGE    3


LOC  OBJ                  LINE     SOURCE

0068 00                     58             KBD_OUTPUT2      DB     0H
0069 (20                    59             KBD_BUFFER2     DB      20 DUP(?)
     ??
     )
007D 00                     60             KBD_BUFFER_SEEK2  DB      0H
007E 00                     61             KBD_INPUT2      DB      0H
                            62             
                            63     ;=========================================================================
                            64     ;Port B of the 8255 is used as the input port for the keybad
                            65     ;Port C is used as the output and grounds the rows one by one
                            66     ;=========================================================================
                            67     
----                        68     DATA_SEG        ENDS
                            69     
                            70     
----                        71     CODE_SEG        SEGMENT
                            72     
                            73             PUBLIC          START
                            74     
                            75     ASSUME  CS:CODE_SEG, SS:STACK_SEG, DS:DATA_SEG
                            76     
0000                        77     START:
                            78      ; Initialize MPCS to MAP peripheral to IO address
0000 BAA8FF                 79              MOV DX, MPCS
0003 B88300                 80              MOV AX, 0083H
0006 EE                     81              OUT DX, AL
                            82     ; PCSBA initial, set the serial port start from 00H
0007 BAA4FF                 83              MOV DX, PCSBA
000A B80300                 84              MOV AX, 0003H ; Peripheral starting address 00H no READY, No Waits
000D EE                     85              OUT DX, AL
                            86     
                            87     ;initialize stack area
000E B8----         R       88                     MOV     AX,STACK_SEG            
0011 8ED0                   89                     MOV     SS,AX
0013 368B260001             90                     MOV     SP,TOS
                            91     ;Initialise data segment
0018 B8----         R       92                     MOV AX,DATA_SEG
001B 8ED8                   93                     MOV DS,AX
                            94     
                            95     ; Initialize the on-chip pheripherals
001D 9A0000----     E       96                     CALL FAR PTR IODEFINE
                            97                     
                            98     
                            99     
                           100     ; ^^^^^^^^^^^^^^^^^  Start of User Main Routine  ^^^^^^^^^^^^^^^^^^
                           101        
0022 B082                  102     MOV AL, 82H       ;mode 0, A - out, B-in ;changed value of CW from 82H
0024 BA8300                103                     MOV DX, CWR
0027 EE                    104                     OUT DX, AL      ;send the control word
0028 B300                  105                     MOV BL, 00H     ;initialize BL for key code
002A 33C0                  106                     XOR AX, AX      ;clear ax flags
002C BA8200                107                     MOV DX, PORTC  ;port C address to DX
002F EE                    108                     OUT DX, AL      ;ground all rows
                           109                     
                           110     
8086/87/88/186 MACRO ASSEMBLER    TIMER                                                    11:33:59  11/29/;2  PAGE    4


LOC  OBJ                  LINE     SOURCE

                           111     
                           112        
                           113     ;code
0030 9A0000----     E      114      call set_timer2
0035 FB                    115                     STI
                           116     
0036                       117     NEXT:
                           118            ; MOV AX,DS:DISPLAY_NUM
                           119             
                           120             ;INC DS:CUR_LED
                           121             ;CALL FAR PTR KEYBOARD2
0036 9A7D00----     R      122             CALL FAR PTR KEYBOARD
                           123             
                           124             ;CALL FAR PTR DISPLAY_LED
003B EBF9                  125      JMP NEXT
                           126     
                           127     ; ^^^^^^^^^^^^^^^ End of User main routine ^^^^^^^^^^^^^^^^^^^^^^^^^
                           128     
                           129     
003D                       130     SERIAL_REC_ACTION       PROC    FAR
003D 51                    131                     PUSH    CX
003E 53                    132                     PUSH    BX
003F 1E                    133                     PUSH    DS
                           134     
0040 BB----         R      135                     MOV     BX,DATA_SEG             ;initialize data segment register
0043 8EDB                  136                     MOV     DS,BX
                           137     
0045 3C3C                  138                     CMP     AL,'<'
0047 750B                  139                     JNE     S_FAST
                           140     
0049 FE061700              141                     INC     DS:T_COUNT_SET
004D FE061700              142                     INC     DS:T_COUNT_SET
                           143     
0051 EB0D90                144                     JMP     S_NEXT0
0054                       145     S_FAST:
0054 3C3E                  146                     CMP     AL,'>'
0056 7521                  147                     JNE     S_RET
                           148     
0058 FE0E1700              149                     DEC     DS:T_COUNT_SET
005C FE0E1700              150                     DEC     DS:T_COUNT_SET
                           151     
0060                       152     S_NEXT0:
0060 B91600                153                     MOV     CX,22                   ;initialize counter for message
0063 BB0000                154                     MOV     BX,0
                           155     
0066 8A4718                156     S_NEXT1:        MOV     AL,DS:REC_MESS[BX]      ;print message
0069 9A0000----     E      157                     call    FAR ptr print_char
006E 43                    158                     INC     BX
006F E2F5                  159                     LOOP    S_NEXT1
                           160     
0071 A01700                161                     MOV     AL,DS:T_COUNT_SET       ;print current period of timer0
0074 9A0000----     E      162                     CALL    FAR PTR PRINT_2HEX
0079                       163     S_RET:
0079 1F                    164                     POP     DS
007A 5B                    165                     POP     BX
8086/87/88/186 MACRO ASSEMBLER    TIMER                                                    11:33:59  11/29/;2  PAGE    5


LOC  OBJ                  LINE     SOURCE

007B 59                    166                     POP     CX
007C CB                    167                     RET
                           168     SERIAL_REC_ACTION       ENDP
                           169     
007D                       170     KEYBOARD PROC FAR
                           171     
007D 52                    172                     PUSH    DX
007E 51                    173                     PUSH    CX
007F 53                    174                     PUSH    BX
0080 50                    175                     PUSH    AX
                           176                     
                           177     
0081                       178     INIT:           
                           179                     
0081 9A3701----     R      180                     call far ptr keyboard2
0086 B17F                  181                     MOV CL, 07FH    ;STORES OUTPUT FOR ROW COUNTER;
                           182                     ;MOV AL,0FEH ; 1111 1110
0088 B500                  183                     MOV CH, 0H      ;set row counter
008A 882E6300              184                     MOV DS:KBD_ROW_COUNTER,CH
008E 880E6400              185                     MOV DS:KBD_OUTPUT, CL
                           186                     
                           187                     
0092                       188     NEXT_ROW:
0092 A06300                189                     MOV AL,DS:KBD_ROW_COUNTER
                           190             
0095 3C04                  191                     CMP AL,04
0097 7DE8                  192                     JGE INIT
0099 8A0E6400              193                     MOV CL,DS:KBD_OUTPUT 
009D D0C1                  194                     ROL CL, 01H       ;rotate AL to ground next row/ al HAS 8 BITS. so mu
                                   st JMP BACK TO WAIT
                           195     
                           196                     ;MOV CH, AL     ;save data byte to ground next row ;WAT?
009F 8AC1                  197                     MOV AL,CL
00A1 BA8200                198                     MOV DX, PORTC   ;port C address to DX; 
00A4 EE                    199                     OUT DX, AL      ;give positive logic to one of the rows
00A5 A26400                200                     MOV DS:KBD_OUTPUT, AL   
                           201             
00A8 BA8100                202                     MOV DX, PORTB   ;port B address to DX  
00AB EC                    203                     IN  AL,DX       ;read input port for key closure
                           204                     
                           205                     
                           206                     ;mov al,101b; change later
00AC 2407                  207                     AND AL, 07H     ;Mask D4-D7
00AE 3C07                  208                     CMP AL,07H
00B0 7463                  209                     JE RETPOINT
                           210                     ;ERROR CHECK
00B2 3C06                  211                     CMP AL,0110B
00B4 740B                  212                     JE VALIDATED
00B6 3C05                  213                     CMP AL,0101B
00B8 7407                  214                     JE VALIDATED
00BA 3C03                  215                     CMP AL,011B
00BC 7403                  216                     JE VALIDATED
00BE EB5590                217                     JMP RETPOINT
                           218                     
00C1                       219     VALIDATED:              
8086/87/88/186 MACRO ASSEMBLER    TIMER                                                    11:33:59  11/29/;2  PAGE    6


LOC  OBJ                  LINE     SOURCE

00C1 9A2101----     R      220                     CALL FAR PTR KBD_PROCESS
                           221                     ;Bl CONTAINS iNDEX OF ARRAY WITH CURRENT KEY
                           222             ;; | SEEK==0 = ADD_TO_BUFFER
                           223             ;; | BUFFER[SEEK]== BL = ADD_TO_BUFFER
                           224             ;; | ELSE = (ADD_TO_BUFFER) & (SEEK 0) AKA RESET
                           225                     ;JMP NUMBERS
                           226     
00C6                       227     NUMBERS:
00C6 32FF                  228                     XOR BH, BH
00C8 8A472D                229                     MOV AL,DS:array[BX] ; Stores character in AL (?)
00CB 32E4                  230                     XOR AH,AH
                           231                     ;CALL   FAR PTR PRINT_CHAR
                           232                     
00CD 8A0E6200              233             MOV CL, DS:KBD_BUFFER_SEEK
00D1 80F900                234             CMP CL,0H
00D4 7412                  235             JZ ADD_TO_BUFFER
                           236                                     
00D6 32ED                  237                     XOR CH,CH
00D8 8BF1                  238             MOV SI, CX
00DA 8A0E5800              239             MOV CL, KBD_BUFFER
                           240                     ;COMPARE WITH VALUE AT SEEK
00DE 3AC8                  241             CMP CL,AL
00E0 7406                  242                     JZ  ADD_TO_BUFFER
                           243                     
00E2 32C9                  244                     XOR CL,CL
00E4 880E6200              245                     MOV DS:KBD_BUFFER_SEEK, CL
                           246                                     
                           247     
00E8                       248     ADD_TO_BUFFER:
                           249             ;;PUT AL INTO SI SO WE CAN PUT CURRENT CHAR IN THE BUFFER 
00E8 32ED                  250                     XOR CH,CH
00EA 8BF1                  251                     MOV SI,CX
00EC 884458                252                     MOV DS:KBD_BUFFER[SI],AL
00EF FE066200              253                     INC DS:KBD_BUFFER_SEEK
                           254     
00F3 B98813                255                     mov cx, 5000
00F6                       256     Debounce:
00F6 90                    257                     nop
00F7 E2FD                  258                     loop debounce
00F9                       259     CHECKER_SEEK:
00F9 8A0E6200              260                     MOV CL, DS:KBD_BUFFER_SEEK
00FD 80F909                261                     CMP CL,KBD_BUFFER_LEN
                           262                     ;ADD CL,48
                           263                     ;MOV AL,CL
                           264                     ;CALL FAR PTR PRINT_CHAR
                           265                     
0100 7513                  266                     JNE RETPOINT
                           267                     ;RESET KBD_BUFFER_SEEK
                           268                     ;AL CONTAINS CHAR
0102 A26500                269                     MOV DS:KBD_INPUT, AL
0105 9A0000----     E      270                     CALL    FAR PTR PRINT_CHAR
010A 9A5402----     R      271                     CALL FAR PTR ADD_LED_BUFFER
010F 32C9                  272                     XOR CL,CL
                           273                     ;BUFFER_SEEK IS RESET
0111 880E6200              274                     MOV DS:KBD_BUFFER_SEEK, CL
8086/87/88/186 MACRO ASSEMBLER    TIMER                                                    11:33:59  11/29/;2  PAGE    7


LOC  OBJ                  LINE     SOURCE

0115                       275     RETPOINT:       
0115 FE066300              276             INC DS:KBD_ROW_COUNTER
                           277             
0119 E976FF                278             JMP NEXT_ROW
                           279                     
                           280             
011C 58                    281             POP AX
011D 5B                    282             POP BX
011E 59                    283             POP CX
011F 5A                    284             POP DX
0120 CB                    285             RET
                           286     KEYBOARD ENDP
                           287     
0121                       288     KBD_PROCESS             PROC    FAR
                           289                     ;0000 0101 => 1111 1010 => 0000 0010  => 0 , 1, 10   
0121 F6D0                  290                     NOT AL
0123 2407                  291                     AND AL, 07H; MASK OTHER BLOODY BITS OMGOMGOMG
0125 D0E8                  292                     SHR AL,01 ; DIVIDE AL BY 2. TO GET COL NUMBER
0127 8AD0                  293                     MOV DL,AL ; TEMP STORE AL IE PORTB INPUT AKA COL NUMBER
                           294                     
0129 A06300                295                     mov Al,DS:KBD_ROW_COUNTER ; ROW COUNT MOVED TO AL
012C B603                  296                     MOV DH,03 ; TO MULTIPLY BY 3
                           297                     ;MULTIPLY THE FUCKER
012E F6E6                  298                     MUL DH
                           299                     ; RESULT IN AX
                           300                     
                           301                     
                           302                     ; NUMBER  <= 9 
0130 02C2                  303                     ADD AL, DL ;ADD row*3 NO TO COL NUMBER
0132 8AD8                  304                     MOV BL,AL
0134 32FF                  305                     XOR BH,BH
                           306                     ;Bl CONTAINS iNDEX OF ARRAY WITH CURRENT KEY
                           307             ;; | SEEK==0 = ADD_TO_BUFFER
                           308             ;; | BUFFER[SEEK]== BL = ADD_TO_BUFFER
                           309             ;; | ELSE = (ADD_TO_BUFFER) & (SEEK 0) AKA RESET
                           310     
                           311             
0136 CB                    312     RET
                           313     KBD_PROCESS             ENDP
                           314     
0137                       315     KEYBOARD2 PROC FAR
                           316     
0137 52                    317                     PUSH    DX
0138 51                    318                     PUSH    CX
0139 53                    319                     PUSH    BX
013A 50                    320                     PUSH    AX
                           321                     
                           322     
013B                       323     INIT2:          
                           324                     
                           325                     
013B B1F7                  326                     MOV CL, 0F7H    ;STORES OUTPUT FOR ROW COUNTER;
                           327                     ;MOV AL,0FEH ; 1110 1111
013D B500                  328                     MOV CH, 0H      ;set row counter
013F 882E6700              329                     MOV DS:KBD_ROW_COUNTER2,CH
8086/87/88/186 MACRO ASSEMBLER    TIMER                                                    11:33:59  11/29/;2  PAGE    8


LOC  OBJ                  LINE     SOURCE

0143 880E6800              330                     MOV DS:KBD_OUTPUT2, CL
                           331             
                           332                     ;call far ptr print_char
0147 EB0490                333                     jmp next_row2
014A                       334     hacky_shit:
014A E98800                335                     jmp exit_kbd2
                           336                     
014D                       337     NEXT_ROW2:
014D A06700                338                     MOV AL,DS:KBD_ROW_COUNTER2
                           339             
                           340     
0150 3C04                  341                     CMP AL,04
0152 7DF6                  342                     JGE hacky_shit
0154 8A0E6800              343                     MOV CL,DS:KBD_OUTPUT2 
0158 D0C1                  344                     ROL CL, 01H       ;rotate AL to ground next row/ al HAS 8 BITS. so mu
                                   st JMP BACK TO WAIT
                           345     
                           346                     ;MOV CH, AL     ;save data byte to ground next row ;WAT?
015A 8AC1                  347                     MOV AL,CL
015C BA8200                348                     MOV DX, PORTC   ;port C address to DX; 
015F EE                    349                     OUT DX, AL      ;give positive logic to one of the rows
0160 A26800                350                     MOV DS:KBD_OUTPUT2, AL  
                           351             ;add al,48
                           352                     ;call far ptr print_char
0163 BA8100                353                     MOV DX, PORTB   ;port B address to DX  
0166 EC                    354                     IN  AL,DX       ;read input port for key closure
                           355                     
                           356                     
                           357                     ;mov al,101b; change later
                           358                     ;call far ptr print_char
0167 2438                  359                     AND AL, 38H     ;Mask D4-D7  00xx x000
0169 C0E803                360                     SHR AL,03
016C 3C07                  361                     CMP AL,07H
016E 745E                  362                     JE RETPOINT2
                           363                     ;ERROR CHECK
0170 3C06                  364                     CMP AL,0110B
0172 740B                  365                     JE VALIDATED2
0174 3C05                  366                     CMP AL,0101B
0176 7407                  367                     JE VALIDATED2
0178 3C03                  368                     CMP AL,011B
017A 7403                  369                     JE VALIDATED2
017C EB5090                370                     JMP RETPOINT2
                           371                     
017F                       372     VALIDATED2:             
017F 9ADA01----     R      373                     CALL FAR PTR KBD_PROCESS2
                           374                     ;Bl CONTAINS iNDEX OF ARRAY WITH CURRENT KEY
                           375             ;; | SEEK==0 = ADD_TO_BUFFER
                           376             ;; | BUFFER[SEEK]== BL = ADD_TO_BUFFER
                           377             ;; | ELSE = (ADD_TO_BUFFER) & (SEEK 0) AKA RESET
                           378                     ;JMP NUMBERS
                           379     
0184                       380     NUMBERS2:
0184 32FF                  381                     XOR BH, BH
0186 8A4739                382                     MOV AL,DS:array2[BX] ; Stores character in AL (?)
0189 32E4                  383                     XOR AH,AH
8086/87/88/186 MACRO ASSEMBLER    TIMER                                                    11:33:59  11/29/;2  PAGE    9


LOC  OBJ                  LINE     SOURCE

                           384                     ;CALL   FAR PTR PRINT_CHAR
                           385                     
018B 8A0E7D00              386             MOV CL, DS:KBD_BUFFER_SEEK2
018F 80F900                387             CMP CL,0H
0192 7412                  388             JZ ADD_TO_BUFFER2
                           389                                     
0194 32ED                  390                     XOR CH,CH
0196 8BF1                  391             MOV SI, CX
0198 8A0E6900              392             MOV CL, KBD_BUFFER2
                           393                     ;COMPARE WITH VALUE AT SEEK
019C 3AC8                  394             CMP CL,AL
019E 7406                  395                     JZ  ADD_TO_BUFFER2
                           396                     
01A0 32C9                  397                     XOR CL,CL
01A2 880E7D00              398                     MOV DS:KBD_BUFFER_SEEK2, CL
                           399                                     
                           400     
01A6                       401     ADD_TO_BUFFER2:
                           402             ;;PUT AL INTO SI SO WE CAN PUT CURRENT CHAR IN THE BUFFER 
01A6 32ED                  403                     XOR CH,CH
01A8 8BF1                  404                     MOV SI,CX
01AA 884469                405                     MOV DS:KBD_BUFFER2[SI],AL
01AD FE067D00              406                     INC DS:KBD_BUFFER_SEEK2
                           407     
01B1 B98813                408                     mov cx, 5000
01B4                       409     Debounce2:
01B4 90                    410                     nop
01B5 E2FD                  411                     loop debounce2
01B7                       412     CHECKER_SEEK2:
01B7 8A0E7D00              413                     MOV CL, DS:KBD_BUFFER_SEEK2
01BB 80F909                414                     CMP CL,KBD_BUFFER_LEN2
                           415                     ;ADD CL,48
                           416                     ;MOV AL,CL
                           417                     ;CALL FAR PTR PRINT_CHAR
                           418                     
01BE 750E                  419                     JNE RETPOINT2
                           420                     ;RESET KBD_BUFFER_SEEK
                           421                     ;AL CONTAINS CHAR
01C0 A27E00                422                     MOV DS:KBD_INPUT2, AL
01C3 9A0000----     E      423                     CALL    FAR PTR PRINT_CHAR
                           424             ;;      CALL FAR PTR ADD_LED_BUFFER
01C8 32C9                  425                     XOR CL,CL
                           426                     ;BUFFER_SEEK IS RESET
01CA 880E7D00              427                     MOV DS:KBD_BUFFER_SEEK2, CL
01CE                       428     RETPOINT2:      
01CE FE066700              429             INC DS:KBD_ROW_COUNTER2
                           430             
01D2 E978FF                431             JMP NEXT_ROW2
                           432                     
01D5                       433     exit_kbd2:      
01D5 58                    434             POP AX
01D6 5B                    435             POP BX
01D7 59                    436             POP CX
01D8 5A                    437             POP DX
01D9 CB                    438             RET
8086/87/88/186 MACRO ASSEMBLER    TIMER                                                    11:33:59  11/29/;2  PAGE   10


LOC  OBJ                  LINE     SOURCE

                           439     KEYBOARD2 ENDP
                           440     
01DA                       441     KBD_PROCESS2            PROC    FAR
                           442                     ;0000 0101 => 1111 1010 => 0000 0010  => 0 , 1, 10   
01DA F6D0                  443                     NOT AL
01DC 2407                  444                     AND AL, 07H; MASK OTHER BLOODY BITS OMGOMGOMG
01DE D0E8                  445                     SHR AL,01 ; DIVIDE AL BY 2. TO GET COL NUMBER
01E0 8AD0                  446                     MOV DL,AL ; TEMP STORE AL IE PORTB INPUT AKA COL NUMBER
                           447                     
01E2 A06700                448                     mov Al,DS:KBD_ROW_COUNTER2 ; ROW COUNT MOVED TO AL
01E5 B603                  449                     MOV DH,03 ; TO MULTIPLY BY 3
                           450                     ;MULTIPLY THE FUCKER
01E7 F6E6                  451                     MUL DH
                           452                     ; RESULT IN AX
                           453                     
                           454                     
                           455                     ; NUMBER  <= 9 
01E9 02C2                  456                     ADD AL, DL ;ADD row*3 NO TO COL NUMBER
01EB 8AD8                  457                     MOV BL,AL
01ED 32FF                  458                     XOR BH,BH
                           459                     ;Bl CONTAINS iNDEX OF ARRAY WITH CURRENT KEY
                           460             ;; | SEEK==0 = ADD_TO_BUFFER
                           461             ;; | BUFFER[SEEK]== BL = ADD_TO_BUFFER
                           462             ;; | ELSE = (ADD_TO_BUFFER) & (SEEK 0) AKA RESET
                           463     
                           464             
01EF CB                    465     RET
                           466     KBD_PROCESS2            ENDP
                           467             
01F0                       468     TIMER2_ACTION   PROC    FAR
01F0 50                    469                     PUSH    AX
01F1 1E                    470                     PUSH    DS
01F2 53                    471                     PUSH    BX
01F3 51                    472                     PUSH    CX
                           473     
                           474                     
                           475     ;CALL FAR PTR DISPLAY_BCD
                           476     ;CALL FAR PTR KEYBOARD  
01F4 9A1502----     R      477     CALL FAR PTR DISPLAY_LED
                           478     ;CALL FAR PTR ADD_LED_BUFFER
01F9 FE0E1600              479     DEC     DS:T_COUNT
01FD 7511                  480                     JNZ     T_NEXT1
01FF A01700                481                     MOV     AL,DS:T_COUNT_SET
0202 A21600                482                     MOV     DS:T_COUNT,AL
                           483     
0205 B91400                484                     MOV     CX,20
0208 BB0000                485                     MOV     BX,0H
020B                       486     T_NEXT0:
020B 8A07                  487                     MOV     AL,DS:TIMER0_MESS[BX]
                           488             
020D 43                    489                     INC     BX
                           490             ;;              CALL    FAR PTR PRINT_CHAR
020E E2FB                  491                     LOOP    T_NEXT0
                           492     ;       kanmy@comp.nus.edu.sg
0210                       493     T_NEXT1:
8086/87/88/186 MACRO ASSEMBLER    TIMER                                                    11:33:59  11/29/;2  PAGE   11


LOC  OBJ                  LINE     SOURCE

                           494     
                           495     
0210 59                    496                     POP     CX
0211 5B                    497                     POP     BX
0212 1F                    498                     POP     DS
0213 58                    499                     POP     AX
0214 CB                    500                     RET
                           501     TIMER2_ACTION   ENDP
                           502     
0215                       503     DISPLAY_LED     PROC    FAR
0215 50                    504             PUSH AX
0216 53                    505             PUSH BX
0217 51                    506             PUSH CX
0218 52                    507             PUSH DX
                           508             ; CONVERTS CUR_LED TO SIGNAL
0219 8A1E5500              509             MOV BL, DS:CUR_LED
021D B0FE                  510             MOV AL,0FEH
021F 8ACB                  511             MOV CL, BL
0221 D2C0                  512             ROL AL,CL
                           513             
0223 BA0001                514             MOV DX, LED_SELECT
0226 EE                    515             OUT DX, AL
                           516             
0227 32FF                  517             XOR BH,BH
0229 8A474F                518             MOV AL, DS:LED_BUFFER[BX]
022C BA8001                519             MOV DX, LED_OUTPUT
022F EE                    520             OUT DX,AL
                           521     
0230 B99001                522             MOV CX, 400
0233                       523     SUSTAIN:        
                           524             
0233 90                    525             NOP
0234 E2FD                  526             LOOP SUSTAIN
                           527             
                           528     ; CLEAR THE FUCKER
0236 B000                  529             MOV AL, 0H
0238 BA8001                530             MOV DX, LED_OUTPUT
023B EE                    531             OUT DX, AL
                           532             
023C A05500                533             MOV AL, DS:CUR_LED
023F 3C05                  534             CMP AL, 5
0241 7D07                  535             JGE RESTORE
0243 FE065500              536             INC DS:CUR_LED
0247 EB0690                537             JMP EXIT
024A                       538     RESTORE:
024A 32C0                  539             XOR AL,AL
024C A25500                540             MOV DS:CUR_LED, AL
                           541             
024F                       542     EXIT:
024F 5A                    543             POP DX
0250 59                    544             POP CX
0251 5B                    545             POP BX
0252 58                    546             POP AX
0253 CB                    547             RET
                           548     
8086/87/88/186 MACRO ASSEMBLER    TIMER                                                    11:33:59  11/29/;2  PAGE   12


LOC  OBJ                  LINE     SOURCE

                           549     DISPLAY_LED ENDP
                           550     
0254                       551     ADD_LED_BUFFER  PROC    FAR
0254 50                    552             PUSH AX
0255 53                    553             PUSH BX
0256 51                    554             PUSH CX
0257 52                    555             PUSH DX
0258 A06600                556             MOV AL, DS:LED_CURSOR
025B 3C06                  557             CMP AL, 06
025D 7C08                  558             JL INCREMENT
025F 32C0                  559             XOR AL, AL
0261 A26600                560             MOV DS:LED_CURSOR,AL
0264 EB0590                561             JMP DONE_INC
0267                       562     INCREMENT:
                           563             ;MOV AL, DS:KBD_INPUT
                           564             ;CMP AL, '*'
                           565             ;JNE DONE_INC
0267 FE066600              566             INC DS:LED_CURSOR
                           567             ;JMP ENDING
026B                       568     DONE_INC:       
026B 8A1E6500              569             MOV BL, DS:KBD_INPUT
                           570             ;CONVERT ASCII TO NUMBER
                           571             
026F 80EB30                572             SUB BL, 48
0272 32FF                  573             XOR BH, BH
0274 8A4745                574             MOV AL, DS:BCD[BX]
0277 8A1E6600              575             MOV BL, DS:LED_CURSOR
027B 32FF                  576             XOR BH,BH
027D 88474F                577             MOV DS:LED_BUFFER[BX],AL
0280                       578     ENDING: 
0280 5A                    579             POP DX
0281 59                    580             POP CX
0282 5B                    581             POP BX
0283 58                    582             POP AX
0284 CB                    583             RET
                           584     ADD_LED_BUFFER  ENDP
0285                       585     CONVERT_TO_BCD  PROC    FAR
                           586     
                           587     
0285 53                    588             PUSH BX
0286 8AD8                  589             MOV BL,AL
0288 80FB0A                590             CMP BL,10
028B 7D03                  591             JGE GREATER_THAN_10
028D EB0390                592             JMP RETURN_BCD
                           593     ;; IF BL(AL) > = 10 WE ADD 6. AH -> 10H 
0290                       594     GREATER_THAN_10:
0290 0406                  595             ADD AL,06
                           596             
0292                       597     RETURN_BCD:
                           598             
0292 5B                    599             POP BX
0293 CB                    600             RET
                           601     CONVERT_TO_BCD  ENDP
                           602     ;; 
                           603     ;EXPECTS A 4BIT BCD DIGIT IN AL. RETURNS THE 7SEG CODE IN AL FOR THAT DIGIT     
8086/87/88/186 MACRO ASSEMBLER    TIMER                                                    11:33:59  11/29/;2  PAGE   13


LOC  OBJ                  LINE     SOURCE

0294                       604     BCD_TO_7SEG     PROC    FAR
0294 53                    605             PUSH BX
                           606     
                           607             ;; STORE AL TEMPORARILY IN BL
0295 8AD8                  608             MOV BL,AL
                           609             
0297 32FF                  610             XOR BH,BH
                           611             ;; GET THE BLTH INDEX OF THE BCD ARRAY IN DATA_SEG
0299 8A4745                612             MOV AL,DS:BCD[BX]
029C 5B                    613             POP BX
029D CB                    614             RET
                           615     BCD_TO_7SEG     ENDP    
                           616     
                           617     
----                       618     CODE_SEG        ENDS
                           619     END

ASSEMBLY COMPLETE, NO ERRORS FOUND
